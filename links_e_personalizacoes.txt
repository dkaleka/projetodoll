**Paper: Padroniza√ß√£o e Boas Pr√°ticas para JSONs no Nordy (ComfyUI Online)**

---

### üîç OBJETIVO

Fornecer um guia definitivo para cria√ß√£o, corre√ß√£o e valida√ß√£o de arquivos JSON compat√≠veis com a plataforma Nordy (ComfyUI Online), assegurando o carregamento correto dos links entre n√≥s e a funcionalidade do fluxo.

---

### üîß ESTRUTURA B√ÅSICA OBRIGAT√ìRIA

Todo arquivo JSON deve conter os seguintes campos principais:

```json
{
  "last_node_id": <int>,
  "last_link_id": <int>,
  "nodes": [ ... ],
  "links": [ ... ],
  "groups": [ ... ],
  "version": 0.4
}
```

---

### ‚ö†Ô∏è FORMATO CORRETO DOS LINKS (OBRIGAT√ìRIO)

Cada link **deve ser um array com 6 elementos**, na seguinte ordem:

```json
[ <id>, <source_id>, <source_slot>, <target_id>, <target_slot>, <type> ]
```

**Exemplo v√°lido:**

```json
[137, 54, 0, 47, 0, "MODEL"]
```

Evite usar objetos com chaves nomeadas (ex: `{ id: 137, source_id: 54, ... }`) pois causam erro de valida√ß√£o `zod schema`.

---

### üîπ CONFIGURA√á√ÉO DE INPUTS E OUTPUTS (DENTRO DE CADA NODE)

#### Dentro de cada node:

* `inputs` deve conter:

  ```json
  {
    "name": "model",
    "type": "MODEL",
    "link": 137,
    "slot_index": 0
  }
  ```
* `outputs` deve conter:

  ```json
  {
    "name": "GUIDER",
    "type": "GUIDER",
    "links": [143],
    "slot_index": 0
  }
  ```

> ‚ùå Erros comuns:
>
> * `"link": null` (deve ser o ID do link ou omitido)
> * `"links": []` (deve conter o ID do link correto se houver)

‚ùå 1. Links n√£o compat√≠veis com o tipo esperado no slot
Os links devem conectar tipos compat√≠veis de entrada e sa√≠da entre os nodes. Por exemplo:


[2, 2, 0, 17, 0, "LATENT"]
Erro:

O node id: 2 √© um LoadImage, que s√≥ gera IMAGE, e n√£o LATENT.

O link est√° tentando conectar uma IMAGE como se fosse LATENT, causando erro de "type mismatch" ou zod validation.

‚ùå 2. Links de output duplicados em slot √∫nico
Exemplo:

[15, 15, 0, 70, 0, "IMAGE"]
[16, 16, 0, 71, 0, "IMAGE"]
Ambos conectam a mesma sa√≠da (ImageUpscaleWithModel, id: 61) ao slot 0 de dois n√≥s diferentes. Isso n√£o √© um erro se o n√≥ de sa√≠da suporta m√∫ltiplos destinos, mas precisa ser compat√≠vel com m√∫ltiplos links no campo outputs.links. No entanto:

Em alguns casos, isso foi feito sem atualizar o campo outputs.links corretamente.

Se links no output do node n√£o inclui todos os IDs dos links, isso fere o schema zod.

‚ùå 3. Links desconectados ou √≥rf√£os
Exemplo:

[6, 6, 0, 32, 1, "CONDITIONING"],
[7, 7, 0, 32, 2, "CONDITIONING"]
O node 6 e o node 7 s√£o ambos LoadImage, mas est√£o sendo conectados como se fossem CONDITIONING, o que gera inconsist√™ncia:

Sa√≠das de IMAGE n√£o podem alimentar entradas que esperam CONDITIONING, como ConditioningCombine.

‚úÖ Formato dos links est√° tecnicamente correto:
Os links seguem o formato:


[ <id>, <source_id>, <source_slot>, <target_id>, <target_slot>, <type> ]
Mas o tipo declarado no sexto elemento ("type") n√£o bate com o tipo real do node output, causando erro de valida√ß√£o.

‚ö†Ô∏è Outros pontos importantes:
O fluxo tem v√°rias conex√µes feitas com LoadImage tentando alimentar inputs de tipos n√£o compat√≠veis como LATENT, CONDITIONING, etc.

Isso pode causar "nothing shows up no canvas", pois o Nordy aborta a importa√ß√£o silenciosamente quando o schema est√° corrompido.

Alguns links referenciam outputs n√£o definidos corretamente nos outputs.links.

‚úÖ Como corrigir:
Confirme o tipo de cada slot no input e output do node antes de fazer o link.

Use apenas tipos compat√≠veis:

IMAGE ‚Üí IMAGE

CONDITIONING ‚Üí CONDITIONING

MODEL ‚Üí MODEL

Atualize os campos outputs.links e inputs.link com o ID correto de cada link.

Se necess√°rio, adicione nodes intermedi√°rios como:

VAEEncode/Decode para converter IMAGE ‚Üî LATENT

CLIPTextEncode para gerar CONDITIONING a partir de string

---

### üåê DICAS DE ORGANIZA√á√ÉO VISUAL

#### üñåÔ∏è Atributos de Estilo e Apar√™ncia:

* `pos`: coordenadas do n√≥ (ex: `[935.5, 879.1]`)
* `size`: largura e altura do bloco (ex: `[340.2, 98]`)
* `title`: nome personalizado vis√≠vel no topo do node
* `color`: cor da borda do n√≥
* `bgcolor`: cor do fundo do n√≥
* `shape`: estilo visual do n√≥ (valores inteiros predefinidos)

```json
"title": "Upload da Imagem da Menina",
"color": "#322",
"bgcolor": "#533"
```

#### üì¶ Exemplo visual de grupos:

```json
"groups": [
  {
    "id": 1,
    "title": "Grupo de Teste",
    "bounding": [212.78, 510.11, 544.26, 565.90],
    "color": "#3f789e",
    "font_size": 24,
    "flags": {}
  },
  {
    "id": 2,
    "title": "Grupo de Teste 2",
    "bounding": [822.18, 509.69, 544.37, 562.25],
    "color": "#a1309b",
    "font_size": 36,
    "flags": {"pinned": true}
  }
]
```

Verifica√ß√£o dos Links

podem existir e devem ser corrigidos:

N√≥dulos com conex√µes ausentes visualmente (n√£o renderizadas por erro de posi√ß√£o)

Pins obrigat√≥rios sem conex√£o (sem link, mas deveriam estar conectados)

Incompatibilidades invis√≠veis (como modelos esperados n√£o carregados corretamente, ou tipo "LIST" vs "SINGLE")

‚úÖ Detectar pins obrigat√≥rios n√£o conectados
‚úÖ Verificar se h√° links com nodes inv√°lidos ou IDs ausentes
‚úÖ Analisar quantidade de conex√µes vis√≠veis por slot vs esperadas



'''''''

Esses grupos ajudam a organizar visualmente os fluxos, facilitando a leitura e a manuten√ß√£o.

---

### üö´ ERROS COMUNS E COMO EVITAR

| Erro                                         | Causa                                     | Corre√ß√£o                                                                            |
| -------------------------------------------- | ----------------------------------------- | ----------------------------------------------------------------------------------- |
| `Expected array, received object`            | Links no formato objeto                   | Usar arrays no formato `[id, source_id, source_slot, target_id, target_slot, type]` |
| Links vis√≠veis na interface mas n√£o carregam | Faltam refer√™ncias nos `inputs`/`outputs` | Corrigir `link` e `links` dentro de cada n√≥                                         |
| `null` ou `[]` em links                      | JSON incompleto ou corrompido             | Usar IDs v√°lidos e referenciar corretamente                                         |

---

### ‚úÖ BOA PR√ÅTICA: VERIFICA√á√ÉO EM DUAS CAMADAS

1. Verificar se todos os links est√£o listados na se√ß√£o principal `"links"`
2. Garantir que os `inputs.link` e `outputs.links` dos `nodes` correspondam aos mesmos IDs

---
### üîó Tipos de Conex√£o Esperados no Nordy

- CLIPTextEncode ‚Üí ConditioningCombine: tipo CONDITIONING
- CheckpointLoader ‚Üí KSampler: tipo MODEL
- ConditioningCombine ‚Üí KSampler: tipo CONDITIONING
- KSampler ‚Üí ProPostApplyLUT: tipo IMAGE
- ProPostApplyLUT ‚Üí SaveImage: tipo IMAGE

üí° Todos os links devem ser inseridos com o tipo exato (n√£o usar "DATA")
----

### üèãÔ∏è CONCLUS√ÉO

Seguir este padr√£o evita erros de carregamento, bugs de conex√£o invis√≠vel e problemas de execu√ß√£o no Nordy. Um fluxo bem formatado acelera o processo de edi√ß√£o e permite reutiliza√ß√£o segura.

Pr√≥ximo passo: implementar validador autom√°tico e adaptador para JSONs antigos com base neste paper.

---

‚úèÔ∏è Atualiza√ß√µes futuras incluir√£o:

* Templates de fluxo m√≠nimo funcional
* Conversores autom√°ticos para JSONs quebrados
* Extens√µes visuais e exemplos ilustrados
* Tabela de cores e formas para organiza√ß√£o estrat√©gica dos n√≥s
